// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// Buildings - Top level organizational units
model Building {
  id          String   @id @default(cuid())
  name        String
  location    String?
  description String?
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relations
  departments Department[]

  @@map("buildings")
}

// Departments - Operational areas within buildings
model Department {
  id          String   @id @default(cuid())
  name        String
  buildingId  String   @map("building_id")
  scheduleId  String?  @map("schedule_id")
  description String?
  is247       Boolean  @default(false) @map("is_247")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relations
  building               Building               @relation(fields: [buildingId], references: [id], onDelete: Cascade)
  schedule               DepartmentSchedule?    @relation(fields: [scheduleId], references: [id])
  services               Service[]
  porters                Porter[]               @relation("PorterRegularDepartment")
  allocations            Allocation[]
  departmentCapabilities DepartmentCapability[]

  @@map("departments")
}

// Services - Distinct functions within departments
model Service {
  id               String   @id @default(cuid())
  name             String
  departmentId     String   @map("department_id")
  description      String?
  isActive         Boolean  @default(true) @map("is_active")
  inheritsSchedule Boolean  @default(true) @map("inherits_schedule")
  createdAt        DateTime @default(now()) @map("created_at")
  updatedAt        DateTime @updatedAt @map("updated_at")

  // Relations
  department          Department          @relation(fields: [departmentId], references: [id], onDelete: Cascade)
  allocations         Allocation[]
  serviceCapabilities ServiceCapability[]

  @@map("services")
}

// Porters - Staff entities
model Porter {
  id                    String       @id @default(cuid())
  name                  String
  contractType          ContractType @map("contract_type")
  shiftId               String?      @map("shift_id")
  weeklyMinHours        Int?         @map("weekly_min_hours")
  contractedHours       Int?         @map("contracted_hours")
  regularDepartmentId   String?      @map("regular_department_id")
  porterType            PorterType   @default(PORTER) @map("porter_type")
  countsTowardsStaffing Boolean      @default(true) @map("counts_towards_staffing")
  createdAt             DateTime     @default(now()) @map("created_at")
  updatedAt             DateTime     @updatedAt @map("updated_at")

  // Relations
  shift              Shift?             @relation(fields: [shiftId], references: [id])
  regularDepartment  Department?        @relation("PorterRegularDepartment", fields: [regularDepartmentId], references: [id])
  allocations        Allocation[]
  availability       Availability[]
  porterCapabilities PorterCapability[]

  @@map("porters")
}

// Shifts - Work rotation patterns
model Shift {
  id         String    @id @default(cuid())
  name       String
  patternId  String    @map("pattern_id")
  shiftMode  ShiftMode @map("shift_mode")
  ident      String
  daysOn     Int       @map("days_on")
  daysOff    Int       @map("days_off")
  offsetDays Int       @default(0) @map("offset_days")
  groundZero DateTime  @map("ground_zero")
  createdAt  DateTime  @default(now()) @map("created_at")
  updatedAt  DateTime  @updatedAt @map("updated_at")

  // Relations
  pattern ShiftPattern @relation(fields: [patternId], references: [id])
  porters Porter[]

  @@map("shifts")
}

// Shift Patterns - Reusable JSON templates for shift cycles
model ShiftPattern {
  id          String   @id @default(cuid())
  name        String
  patternJson String   @map("pattern_json") @db.Text
  description String?
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relations
  shifts Shift[]

  @@map("shift_patterns")
}

// Department Schedules - Operational patterns for departments
model DepartmentSchedule {
  id          String   @id @default(cuid())
  name        String
  patternId   String?  @map("pattern_id")
  description String?
  isActive    Boolean  @default(true) @map("is_active")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relations
  departments Department[]
  periods     DepartmentSchedulePeriod[]

  @@map("department_schedules")
}

// Department Schedule Periods - Daily operational windows
model DepartmentSchedulePeriod {
  id              String    @id @default(cuid())
  scheduleId      String    @map("schedule_id")
  dayOfWeek       DayOfWeek @map("day_of_week")
  openTime        String    @map("open_time") // Format: "HH:MM"
  closeTime       String    @map("close_time") // Format: "HH:MM"
  requiredPorters Int       @map("required_porters")

  // Relations
  schedule DepartmentSchedule @relation(fields: [scheduleId], references: [id], onDelete: Cascade)

  @@map("department_schedule_periods")
}

// Capabilities - Skills, qualifications, permissions
model Capability {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relations
  porterCapabilities     PorterCapability[]
  departmentCapabilities DepartmentCapability[]
  serviceCapabilities    ServiceCapability[]

  @@map("capabilities")
}

// Porter Capabilities - Many-to-many with expiry dates
model PorterCapability {
  porterId     String    @map("porter_id")
  capabilityId String    @map("capability_id")
  expiryDate   DateTime? @map("expiry_date")
  createdAt    DateTime  @default(now()) @map("created_at")

  // Relations
  porter     Porter     @relation(fields: [porterId], references: [id], onDelete: Cascade)
  capability Capability @relation(fields: [capabilityId], references: [id], onDelete: Cascade)

  @@id([porterId, capabilityId])
  @@map("porter_capabilities")
}

// Department Capabilities - Required/preferred capabilities for departments
model DepartmentCapability {
  departmentId  String        @map("department_id")
  capabilityId  String        @map("capability_id")
  requiredLevel RequiredLevel @map("required_level")

  // Relations
  department Department @relation(fields: [departmentId], references: [id], onDelete: Cascade)
  capability Capability @relation(fields: [capabilityId], references: [id], onDelete: Cascade)

  @@id([departmentId, capabilityId])
  @@map("department_capabilities")
}

// Service Capabilities - Required/preferred capabilities for services
model ServiceCapability {
  serviceId     String        @map("service_id")
  capabilityId  String        @map("capability_id")
  requiredLevel RequiredLevel @map("required_level")

  // Relations
  service    Service    @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  capability Capability @relation(fields: [capabilityId], references: [id], onDelete: Cascade)

  @@id([serviceId, capabilityId])
  @@map("service_capabilities")
}

// Allocations - Porter assignments to departments/services
model Allocation {
  id            String         @id @default(cuid())
  porterId      String         @map("porter_id")
  departmentId  String         @map("department_id")
  serviceId     String?        @map("service_id")
  startDatetime DateTime       @map("start_datetime")
  endDatetime   DateTime?      @map("end_datetime")
  type          AllocationType
  reason        String?
  createdAt     DateTime       @default(now()) @map("created_at")
  updatedAt     DateTime       @updatedAt @map("updated_at")

  // Relations
  porter     Porter     @relation(fields: [porterId], references: [id], onDelete: Cascade)
  department Department @relation(fields: [departmentId], references: [id], onDelete: Cascade)
  service    Service?   @relation(fields: [serviceId], references: [id], onDelete: Cascade)

  @@map("allocations")
}

// Availability - Absence, leave, overtime tracking
model Availability {
  id            String             @id @default(cuid())
  porterId      String             @map("porter_id")
  startDatetime DateTime           @map("start_datetime")
  endDatetime   DateTime           @map("end_datetime")
  status        AvailabilityStatus
  reason        String?
  createdAt     DateTime           @default(now()) @map("created_at")
  updatedAt     DateTime           @updatedAt @map("updated_at")

  // Relations
  porter Porter @relation(fields: [porterId], references: [id], onDelete: Cascade)

  @@map("availability")
}

// System Settings - Configuration parameters
model SystemSetting {
  settingKey   String   @id @map("setting_key")
  settingValue String   @map("setting_value")
  description  String?
  updatedAt    DateTime @updatedAt @map("updated_at")

  @@map("system_settings")
}

// Enums
enum ContractType {
  SHIFT
  FIXED
  RELIEF
}

enum PorterType {
  PORTER
  SUPERVISOR
}

enum ShiftMode {
  DAY
  NIGHT
  MIXED
}

enum DayOfWeek {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
  SUNDAY
}

enum RequiredLevel {
  REQUIRED
  PREFERRED
}

enum AllocationType {
  REGULAR
  TEMPORARY
  RELIEF
}

enum AvailabilityStatus {
  AVAILABLE
  UNAVAILABLE
  OVERTIME
}
